# #!/bin/bash

# # 3D-Aware Stable Diffusion Project Setup Script - Initial script generated by Claude (because what even is YAML), further updates made by me
# # (README) Run with: bash setup_environment.sh

# set -e  # Exit on any error

# echo "Setting up 3D-Aware SD Env - This will require patience, lots of patience"
# echo "--------------------------"
# echo "Checking system requirements"

# # Check Python version
# PYTHON_VERSION=$(python3 --version 2>&1 | cut -d' ' -f2 | cut -d'.' -f1,2)
# REQUIRED_PYTHON="3.8"

# if [ "$(printf '%s\n' "$REQUIRED_PYTHON" "$PYTHON_VERSION" | sort -V | head -n1)" = "$REQUIRED_PYTHON" ]; then 
#     echo "Python $PYTHON_VERSION detected (>= $REQUIRED_PYTHON required)"
# else
#     echo "Python >= $REQUIRED_PYTHON required. Found: $PYTHON_VERSION"
#     exit 1
# fi

# # Check CUDA availability
# if command -v nvidia-smi &> /dev/null; then
#     echo "NVIDIA GPU detected:"
#     nvidia-smi --query-gpu=name,memory.total --format=csv,noheader,nounits
#     CUDA_VERSION=$(nvidia-smi | grep "CUDA Version" | awk '{print $9}')
#     echo "CUDA Version: $CUDA_VERSION"
# else
#     echo "NVIDIA GPU not detected. CPU-only installation will proceed."
#     echo "Note: Training will be significantly slower if you're not using GPU."
# fi

# # Check available disk space (need AL LEAST 10GB for models and data)
# AVAILABLE_SPACE=$(df -BG . | tail -1 | awk '{print $4}' | sed 's/G//')
# if [ "$AVAILABLE_SPACE" -lt 10 ]; then
#     echo "Warning: Less than 10GB available disk space. You need more for models and datasets."
# else
#     echo "Sufficient disk space available: ${AVAILABLE_SPACE}GB"
# fi

# echo

# # Create project directory structure
# echo "Creating project data directory structure..."
# mkdir -p {data/{datasets,outputs,models},logs,configs,scripts,notebooks,docs}
# mkdir -p data/datasets/{synthetic,real_world,evaluation}
# mkdir -p data/outputs/{images,videos,meshes,point_clouds}
# mkdir -p data/models/{pretrained,checkpoints}

# echo "Directory structure for data created"
# echo

# # Virtual environment setup
# echo "Setting up Python virtual env"

# if [ ! -d "venv" ]; then
#     python3 -m venv venv
#     echo "Virtual env created"
# else
#     echo "Virtual env already exists"
# fi

# source venv/bin/activate
# echo "Virtual env activated"

# # Upgrade pip and install wheel
# echo "Upgrading pip and installing build tools..."
# pip install --upgrade pip setuptools wheel
# echo

# # Install PyTorch with CUDA support
# echo "Installing PyTorch with CUDA support..."

# # Detect CUDA version and install PyTorch based on that
# if command -v nvidia-smi &> /dev/null; then
#     CUDA_VERSION=$(nvidia-smi | grep "CUDA Version" | awk '{print $9}' | cut -d'.' -f1,2)
    
#     case $CUDA_VERSION in
#         "11.8")
#             echo "Installing PyTorch for CUDA 11.8..."
#             pip install torch==2.0.1+cu118 torchvision==0.15.2+cu118 torchaudio==2.0.2+cu118 \
#                 --index-url https://download.pytorch.org/whl/cu118
#             ;;
#         "12.1")
#             echo "Installing PyTorch for CUDA 12.1..."
#             pip install torch torchvision torchaudio
#             ;;
#         *)
#             echo "Installing latest PyTorch (may not match CUDA version exactly)..."
#             pip install torch torchvision torchaudio
#             ;;
#     esac
# else
#     echo "Installing CPU-only PyTorch..."
#     pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
# fi

# echo "PyTorch installation complete"
# echo

# # Install main requirements
# echo "Installing main dependencies..."
# pip install -r requirements.txt

# echo "Main dependencies installed"
# echo

# # Install PyTorch3D (can be tricky, so we handle it carefully)
# echo "🔺 Installing PyTorch3D..."

# PYTORCH3D_INSTALLED=false

# # Method 1: Try conda if available
# if command -v conda &> /dev/null; then
#     echo "   Attempting conda installation..."
#     if conda install pytorch3d -c pytorch3d -y 2>/dev/null; then
#         PYTORCH3D_INSTALLED=true
#         echo "   ✅ PyTorch3D installed via conda"
#     fi
# fi

# # Method 2: Try pre-built wheels if conda failed
# if [ "$PYTORCH3D_INSTALLED" = false ]; then
#     echo "   Trying pre-built wheels..."
    
#     # Detect Python version
#     PYTHON_VER=$(python3 -c "import sys; print(f'py{sys.version_info.major}{sys.version_info.minor}')")
    
#     # Detect CUDA version for wheel selection
#     if command -v nvidia-smi &> /dev/null; then
#         CUDA_VER=$(nvidia-smi | grep "CUDA Version" | awk '{print $9}' | sed 's/\.//')
#         CUDA_VER_SHORT=${CUDA_VER:0:4}  # Get first 4 chars (e.g., 1181 -> 1181, 1171 -> 1171)
        
#         case $CUDA_VER_SHORT in
#             "118"*)
#                 WHEEL_URL="https://dl.fbaipublicfiles.com/pytorch3d/packaging/wheels/${PYTHON_VER}_cu118_pyt201/download.html"
#                 ;;
#             "117"*)
#                 WHEEL_URL="https://dl.fbaipublicfiles.com/pytorch3d/packaging/wheels/${PYTHON_VER}_cu117_pyt201/download.html"
#                 ;;
#             "121"*)
#                 WHEEL_URL="https://dl.fbaipublicfiles.com/pytorch3d/packaging/wheels/${PYTHON_VER}_cu121_pyt201/download.html"
#                 ;;
#             *)
#                 WHEEL_URL="https://dl.fbaipublicfiles.com/pytorch3d/packaging/wheels/${PYTHON_VER}_cu118_pyt201/download.html"
#                 ;;
#         esac
        
#         if pip install --no-index --no-cache-dir pytorch3d -f $WHEEL_URL 2>/dev/null; then
#             PYTORCH3D_INSTALLED=true
#             echo "   ✅ PyTorch3D installed via pre-built wheel"
#         fi
#     fi
# fi

# # Method 3: Try regular pip install
# if [ "$PYTORCH3D_INSTALLED" = false ]; then
#     echo "   Trying pip install..."
#     if pip install pytorch3d 2>/dev/null; then
#         PYTORCH3D_INSTALLED=true
#         echo "   ✅ PyTorch3D installed via pip"
#     fi
# fi

# # If all methods failed, continue without PyTorch3D
# if [ "$PYTORCH3D_INSTALLED" = false ]; then
#     echo "   ⚠️  PyTorch3D installation failed. Will use fallback implementation."
#     echo "   📖 See pytorch3d_install_guide.md for manual installation options."
    
#     # Create a marker file to indicate fallback mode
#     touch .use_pytorch3d_fallback
# else
#     # Remove fallback marker if it exists
#     rm -f .use_pytorch3d_fallback
# fi
# echo

# # Install optional CUDA extensions for Gaussian Splatting
# echo "⚡ Installing optional CUDA extensions..."

# if command -v nvcc &> /dev/null; then
#     echo "NVCC detected, installing diff-gaussian-rasterization..."
#     pip install git+https://github.com/graphdeco-inria/diff-gaussian-rasterization.git || {
#         echo "Failed to install diff-gaussian-rasterization. Will use fallback implementation."
#     }
# else
#     echo "NVCC not found. Skipping CUDA extensions (will use slower fallback)."
# fi

# echo

# # Download pre-trained models
# echo "Downloading pre-trained models..."

# # Create model directories
# mkdir -p data/models/pretrained/{stable_diffusion,controlnet,depth_estimation,clip}

# # Download Stable Diffusion models (will be downloaded on first use by diffusers)
# echo "   Stable Diffusion models will be downloaded automatically on first use"

# # Download depth estimation model
# echo "Downloading MiDaS depth estimation model..."
# python3 -c "
# import torch
# import urllib.request
# import os

# os.makedirs('data/models/pretrained/depth_estimation', exist_ok=True)
# url = 'https://github.com/isl-org/MiDaS/releases/download/v3_1/dpt_beit_large_512.pt'
# filepath = 'data/models/pretrained/depth_estimation/dpt_beit_large_512.pt'

# if not os.path.exists(filepath):
#     print(f'Downloading {url}...')
#     urllib.request.urlretrieve(url, filepath)
#     print('Download complete!')
# else:
#     print('Model already exists, skipping download.')
# "

# echo "Pre-trained models setup complete"
# echo

# # Create configuration files
# echo "Creating configuration files..."

# # Create main config file
# cat > configs/default_config.yaml << EOF
# # Default Configuration for 3D-Aware Text-to-Scene Generation

# # Model Configuration
# model:
#   name: "SpatialGaussianModel"
#   num_gaussians: 10000
#   learning_rate: 0.01
#   max_iterations: 1000

# # Generation Settings
# generation:
#   image_size: 512
#   num_views: 8
#   batch_size: 1
#   guidance_scale: 7.5
#   num_inference_steps: 50

# # Camera Settings
# camera:
#   fov: 60.0  # degrees
#   near: 0.1
#   far: 100.0
#   radius: 3.0  # camera distance from scene center

# # Regularization Weights
# regularization:
#   spatial_weight: 0.1
#   semantic_weight: 0.05
#   consistency_weight: 0.02
#   smoothness_weight: 0.01

# # Training Settings
# training:
#   use_amp: true  # Automatic Mixed Precision
#   gradient_clip: 1.0
#   save_every: 100
#   validate_every: 200

# # Paths
# paths:
#   output_dir: "./data/outputs"
#   model_dir: "./data/models"
#   log_dir: "./logs"

# # Hardware Settings
# hardware:
#   device: "auto"  # auto, cuda, cpu
#   num_workers: 4
#   pin_memory: true
# EOF

# # Create experiment tracking config
# cat > configs/experiment_config.yaml << EOF
# # Experiment Configuration for Research Paper

# # Wandb Configuration
# wandb:
#   project: "spatial-gaussian-text-to-3d"
#   entity: null  # Your wandb username
#   tags: ["3d-generation", "gaussian-splatting", "diffusion"]
#   notes: "3D-aware text-to-scene generation experiments"

# # Evaluation Datasets
# evaluation:
#   synthetic_dataset_size: 100
#   real_prompts_count: 200
#   test_split: 0.2
#   categories:
#     - "simple_objects"
#     - "furniture"
#     - "vehicles" 
#     - "natural_scenes"

# # Baseline Methods for Comparison
# baselines:
#   - "dreamfusion"
#   - "magic3d"
#   - "prolificdreamer"

# # Metrics to Track
# metrics:
#   - "multi_view_lpips"
#   - "depth_consistency"
#   - "clip_similarity"
#   - "generation_time"
#   - "memory_usage"
#   - "user_preference"

# # Ablation Study Configurations
# ablations:
#   components:
#     - "spatial_regularization"
#     - "semantic_initialization"
#     - "cross_view_consistency"
#     - "adaptive_regularization"
# EOF

# echo "Configuration files created"
# echo

# # Create example script
# echo "Creating example usage script..."

# cat > scripts/run_example.py << 'EOF'
# #!/usr/bin/env python3
# """
# Example script for running 3D-aware text-to-scene generation
# """

# import sys
# sys.path.append('.')

# from main import ProjectConfig, SpatialAIPipeline

# def main():
#     # Configuration for quick test
#     config = ProjectConfig(
#         image_size=256,      # Start small for testing
#         num_views=4,         # Fewer views for speed
#         num_gaussians=1000,  # Reduced complexity
#         max_iterations=100,  # Quick test
#         output_dir="./data/outputs/example_run"
#     )
    
#     # Create pipeline
#     pipeline = SpatialAIPipeline(config)
    
#     # Test prompts
#     test_prompts = [
#         "a red cube on a wooden table",
#         "a vintage leather armchair",
#         "a small potted plant on a windowsill"
#     ]
    
#     for i, prompt in enumerate(test_prompts):
#         print(f"\n🎨 Generating scene {i+1}/3: '{prompt}'")
#         try:
#             results = pipeline.run_pipeline(prompt)
#             print(f"Successfully generated scene for: {prompt}")
#             print(f"Output saved to: {config.output_dir}")
#         except Exception as e:
#             print(f"Error generating scene: {e}")
#             continue
    
#     print("\nExample run complete!")
#     print("Check the output directory for generated 3D scenes.")

# if __name__ == "__main__":
#     main()
# EOF

# chmod +x scripts/run_example.py

# echo "Example script created"
# echo

# # Create environment validation script
# echo "Creating environment validation script..."

# cat > scripts/validate_environment.py << 'EOF'
# #!/usr/bin/env python3
# """
# Validate that all dependencies are correctly installed
# """

# import sys
# import importlib
# import torch

# def check_import(module_name, package_name=None):
#     """Check if a module can be imported"""
#     try:
#         importlib.import_module(module_name)
#         print(f"{package_name or module_name}")
#         return True
#     except ImportError as e:
#         print(f"{package_name or module_name}: {e}")
#         return False

# def main():
#     print("Validating Environment Setup")
#     print("=" * 40)
    
#     # Core dependencies
#     print("\n Core Dependencies:")
#     all_good = True
    
#     dependencies = [
#         ("torch", "PyTorch"),
#         ("torchvision", "TorchVision"),
#         ("diffusers", "Diffusers"),
#         ("transformers", "Transformers"),
#         ("cv2", "OpenCV"),
#         ("PIL", "Pillow"),
#         ("numpy", "NumPy"),
#         ("scipy", "SciPy"),
#         ("matplotlib", "Matplotlib"),
#         ("trimesh", "Trimesh"),
#         ("sklearn", "Scikit-learn"),
#         ("tqdm", "TQDM"),
#         ("wandb", "Weights & Biases"),
#     ]
    
#     for module, name in dependencies:
#         if not check_import(module, name):
#             all_good = False
    
#     # Optional dependencies
#     print("\n🔧 Optional Dependencies:")
#     optional_deps = [
#         ("pytorch3d", "PyTorch3D"),
#         ("open3d", "Open3D"),
#         ("lpips", "LPIPS"),
#         ("timm", "TIMM"),
#     ]
    
#     for module, name in optional_deps:
#         check_import(module, name)
    
#     # CUDA check
#     print("\nCUDA Support:")
#     if torch.cuda.is_available():
#         print(f"CUDA available: {torch.cuda.get_device_name()}")
#         print(f"CUDA version: {torch.version.cuda}")
#         print(f"Memory: {torch.cuda.get_device_properties(0).total_memory // 1e9:.0f}GB")
#     else:
#         print("CUDA not available - will use CPU")
    
#     # Memory check
#     print("\nSystem Resources:")
#     try:
#         import psutil
#         memory = psutil.virtual_memory()
#         print(f"   RAM: {memory.total // 1e9:.0f}GB total, {memory.available // 1e9:.0f}GB available")
#     except ImportError:
#         print("   Install psutil to check memory")
    
#     print("\n" + "=" * 40)
#     if all_good:
#         print("Environment setup successful! Ready to run experiments.")
#         return 0
#     else:
#         print("Some dependencies missing. Check installation.")
#         return 1

# if __name__ == "__main__":
#     sys.exit(main())
# EOF

# chmod +x scripts/validate_environment.py

# echo "Validation script created"
# echo

# # Test the environment
# echo "Testing environment setup..."
# python3 scripts/validate_environment.py

# echo
# echo "Setup Complete!"
# echo "=================="
# echo
# echo "Next steps:"
# echo "1. Activate environment: source venv/bin/activate"
# echo "2. Test installation: python scripts/validate_environment.py"  
# echo "3. Run example: python scripts/run_example.py"
# echo "4. Check main implementation: python main.py"
# echo
# echo "Project structure:"
# echo "data/          - Datasets, models, outputs"
# echo "configs/       - Configuration files"
# echo "scripts/       - Utility scripts"
# echo "logs/          - Training and experiment logs"
# echo "notebooks/     - Jupyter notebooks for analysis"
# echo


# PyTorch ecosystem
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

# Diffusion models
pip install diffusers transformers accelerate

# Computer vision and 3D
pip install opencv-python pillow
pip install numpy scipy matplotlib

# 3D operations
conda create -n pytorch3d python=3.9
conda activate pytorch3d
conda install pytorch=1.13.0 torchvision pytorch-cuda=11.6 -c pytorch -c nvidia
conda install -c iopath iopath

# Mesh processing
pip install trimesh

# Utilities
pip install tqdm wandb  # for logging